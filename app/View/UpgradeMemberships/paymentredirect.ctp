<?php
$e='';
require_once WWW_ROOT.'test_card/Mobilpay/Payment/Request/Abstract.php';
require_once WWW_ROOT.'test_card/Mobilpay/Payment/Request/Card.php';
require_once WWW_ROOT.'test_card/Mobilpay/Payment/Invoice.php';
require_once WWW_ROOT.'test_card/Mobilpay/Payment/Address.php';
if($this->Session->check('billtype'))
{
	$billtype=$this->Session->read('billtype');
}
else
{
	$billtype="person";
}
#for testing purposes, all payment requests will be sent to the sandbox server. Once your account will be active you must switch back to the live server https://secure.mobilpay.ro
#in order to display the payment form in a different language, simply add the language identifier to the end of the paymentUrl, i.e https://secure.mobilpay.ro/en for English
$paymentUrl = 'http://sandboxsecure.mobilpay.ro';
//$paymentUrl = 'https://secure.mobilpay.ro';
// this is the path on your server to the public certificate. You may download this from Admin -> Conturi de comerciant -> Detalii -> Setari securitate
$x509FilePath 	= WWW_ROOT.'test_card/public.cer';
try
{
	srand((double) microtime() * 1000000);
	$objPmReqCard 						= new Mobilpay_Payment_Request_Card();
	#merchant account signature - generated by mobilpay.ro for every merchant account
	#semnatura contului de comerciant - mergi pe www.mobilpay.ro Admin -> Conturi de comerciant -> Detalii -> Setari securitate
	$objPmReqCard->signature 			= '81F7-XCWN-U18H-SW5N-YME1';
	
	#you should assign here the transaction ID registered by your application for this commercial operation
	#order_id should be unique for a merchant account
	$objPmReqCard->orderId 				= md5($tempDetails['TempMembershipDetail']['randomid']);
	#below is where mobilPay will send the payment result. This URL will always be called first; mandatory
	$objPmReqCard->confirmUrl 			= $base_url.'UpgradeMemberships/failed';  
	#below is where mobilPay redirects the client once the payment process is finished. Not to be mistaken for a "successURL" nor "cancelURL"; mandatory
	$objPmReqCard->returnUrl 			= $base_url.'UpgradeMemberships/success'; 
	
	#detalii cu privire la plata: moneda, suma, descrierea
	#payment details: currency, amount, description
	$objPmReqCard->invoice = new Mobilpay_Payment_Invoice();
	#payment currency in ISO Code format; permitted values are RON, EUR, USD, MDL; please note that unless you have mobilPay permission to 
	#process a currency different from RON, a currency exchange will occur from your currency to RON, using the official BNR exchange rate from that moment
	#and the customer will be presented with the payment amount in a dual currency in the payment page, i.e N.NN RON (e.ee EUR)
	$objPmReqCard->invoice->currency	= 'RON';
	$objPmReqCard->invoice->amount= $UserMembership['UserMembership']['price'];
	#available installments number; if this parameter is present, only its value(s) will be available
	//$objPmReqCard->invoice->installments= '2,3';
	#selected installments number; its value should be within the available installments defined above
	//$objPmReqCard->invoice->selectedInstallments= '3';
	$objPmReqCard->invoice->details		= 'Plata cu card-ul prin mobilPay';
	
	#detalii cu privire la adresa posesorului cardului
	#details on the cardholder address (optional)
	$billingAddress 				= new Mobilpay_Payment_Address();
	$billingAddress->type			= $billtype; //should be "person"
	$billingAddress->firstName		= $tempDetails['TempMembershipDetail']['fname'];
	$billingAddress->lastName		= '';
	$billingAddress->address		= $tempDetails['TempMembershipDetail']['address'];
	$billingAddress->email			= $tempDetails['TempMembershipDetail']['email'];
	$billingAddress->mobilePhone		= $tempDetails['TempMembershipDetail']['phone'];
	$objPmReqCard->invoice->setBillingAddress($billingAddress);
	
	#detalii cu privire la adresa de livrare
	#details on the shipping address
	$shippingAddress 				= new Mobilpay_Payment_Address();
	$shippingAddress->type			= $billtype;
	$shippingAddress->firstName		= $tempDetails['TempMembershipDetail']['shipping_fname'];
	$shippingAddress->lastName		= '';
	$shippingAddress->address		= $tempDetails['TempMembershipDetail']['shipping_address'];
	$shippingAddress->email		= $tempDetails['TempMembershipDetail']['shipping_email'];
	$shippingAddress->mobilePhone		= $tempDetails['TempMembershipDetail']['shipping_phone'];
	$objPmReqCard->invoice->setShippingAddress($shippingAddress);

	#uncomment the line below in order to see the content of the request
	//echo "<pre>";print_r($objPmReqCard);echo "</pre>";
	$objPmReqCard->encrypt($x509FilePath);
}
catch(Exception $e)
{
}//echo $objPmReqCard->invoice->amount;
?>
<div class="span-15 prepend-1">

<?php if(!($e instanceof Exception)):?>
<p>
	<form name="frmPaymentRedirect" id="frmPaymentRedirect" method="post" action="<?php echo $paymentUrl;?>">
	<input type="hidden" name="env_key" value="<?php echo $objPmReqCard->getEnvKey();?>"/>
	<input type="hidden" name="data" value="<?php echo $objPmReqCard->getEncData();?>"/>
	
	</form>
</p>
<!--
<script type="text/javascript" language="javascript">
	window.setTimeout(document.frmPaymentRedirect.submit(), 5000);
</script> -->
<?php else:?>
<p><strong><?php
//pr($e);
 echo $e->getMessage();?></strong></p>
<?php endif;?>
<script type="text/javascript">
	document.getElementById('frmPaymentRedirect').submit();</script>
